statements        : NEWLINE* expr (NEWLINE+ expr)* NEWLINE

expr              : KEYWORD:set IDENTIFIER EQ expr
                  : compar-expr ((KEYWORD:AND|KEYWORD:OR)compar-expr)*
                  
compar-expr       : NOT compar-expr
                  : arith-exp ((EE|LT|GT|GTE|LTE) arith-exp)*
        
arith-expr        : term ((PLUS|MINUS) term)*

term              : factor ((MUL|DIV) factor)*

factor            : (PLUS|MINUS) factor
                  : power

power             : call ((POW) factor)*

call              : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?
       
atom              : INT|FLOAT|STRING|IDENTIFIER
                  : LPAREN exp RPAREN
                  : list-expr
                  : if-expr 
                  : func-def

list-expr :       : LSQUARE ((expr (COMMA expr)*)? RQUARE

if-expr           : KEYWORD:IF expr KEYWORD:THEN
                    (expr if-expr-b| if-expr-c?)
                  | (NEWLINE statements KEYWORD:END if-expr-b|if-expr-c)

if-expr-b         : KEYWORD:ELIF expr KEYWORD:THEN
                    (expr if-expr-b| if-expr-c?)
                  | (NEWLINE statements KEYWORD:END if-expr-b|if-expr-c)

if-expr-c         : KEYWORD:ELSE
                    expr
                  |  (NEWLINE statements KEYWORD:END)

for-expr          : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
                  : (KEYWORD:STEP)? expr KEYWORD:THEN 
                    expr
                  |  (NEWLINE statements KEYWORD:END)


while-expr        : KEYWORD:WHILE expr KEYWORD:THEN 
                    expr
                  |  (NEWLINE statements KEYWORD:END)  

fun-def           : KEYWORD:FUN IDENTIFIER? LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
                  : (ARROW expr)
                  | (NEWLINE statements KEYWORD:END)